<?php
/**
 * Implements hook_menu().
 */
function aims_menu() {
  $items = array();

  $items['investors/reports'] =  array (
    'page callback' => 'investors_reports',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/investors_reports.inc',
    'file path' => drupal_get_path('module', 'aims'),
  );
  
  $items['investors/reports/traffic-news'] =  array (
    'page callback' => 'investors_traffic_reports',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/investors_traffic_reports.inc',
    'file path' => drupal_get_path('module', 'aims'),
  );
   $items['investors/showlivedatal/%'] =  array (
    'page callback' => 'investors_showlivedata_intnl',
	'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK,
	'file' => 'inc/investors_showlivedata.inc',
	'file path' => drupal_get_path('module', 'aims'),
  );
  

  return $items;
}

/**
 * Implements hook_theme().
 */
function aims_theme($existing, $type, $theme, $path) {
  $themes = array(
    'investors_traffic_reports' => array(
      'template' => 'templates/investors_traffic_reports',
    ),
  );

  return $themes;
}

/**
 * Implements hook_block_info().
 */
function aims_block_info() {
  $blocks = array();
  $blocks['passenger_information'] = array (
    'info' => t('Passenger Information'),
  );
  
  $blocks['traffic_information'] = array (
    'info' => t('Traffic Information'),
  );
  
    $blocks['international_information'] = array (
    'info' => t('International Traffic Information'),
  );
    $blocks['domestic_information'] = array (
    'info' => t('Domestic Traffic Information'),
  );
    $blocks['cargo_information'] = array (
    'info' => t('Cargo Traffic Information'),
  );
      $blocks['aai_traffic'] = array (
    'info' => t('AAI Traffic Information'),
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function aims_block_view($delta = '') {
  $airport = arg(1);
  $block = array();
  switch ($delta) {
	 case 'traffic_information':
      $block['subject'] = '';
	  $block['content'] = aims_traffic_content($airport);
	  break;
	  case 'passenger_information':
      $block['subject'] = '';
	  $block['content'] = aims_BLOCK_ABC_CONTENT($airport);		 
      break;
	  case 'international_information':
      $block['subject'] = '';
	  $block['content'] = aims_BLOCK_international($airport);
		 
      break;
	  case 'domestic_information':
      $block['subject'] = '';
	  $block['content'] = aims_BLOCK_domestic($airport);		 
      break;
	  
	  case 'cargo_information':
      $block['subject'] = '';
	  $block['content'] = aims_BLOCK_cargo($airport);		 
      break;   
	  case 'aai_traffic':
      $block['subject'] = 'AAI Traffic';
	  $block['content'] = aims_BLOCK_traffic($airport);		 
      break;   	  
  }

  return $block;
}





function aims_BLOCK_content_ITEMS(){
  $items = array();
  $items['VAR_ONE'] = array('#markup' => 'VAR_ONE_OUTPUT'); //this is the simplest kind of render array
  $items['VAR_TWO'] = array(
                        '#prefix' => '<div>',
                        '#markup' => 'VAR_TWO_OUTPUT',
                            '#suffix' => '</div>',
                          );
// this is where the $items get sent to your default MYMODULE_BLOCK.tpl.php that gets 
// registered below
      return theme('MYMODULE_BLOCK_FUNCTION_ITEMS', array('items' => $items)); 
 }
 
function aims_preprocess_page(&$vars) {
  if ((arg(1) === 'showlivedata') || (arg(1) === 'showlivedatal')) {
    $vars['theme_hook_suggestion'] = 'page__livedata';
  }
}
function aims_preprocess_html(&$vars) {
  if ((arg(1) === 'showlivedata') || (arg(1) === 'showlivedatal')) {
    $vars['theme_hook_suggestion'] = 'html__livedata';
  }
}

	
function aims_BLOCK_international($airport) {	
	$block = array();
	$query = db_select('NEWWEB_AIMS_DATA', 'ad');
	$query->groupBy('ad.AIMS_LOCAL_AIRPORT');
	$query->groupBy('ad.AIMS_AIRPORT_TYPE');//GROUP BY user ID
	$query->groupBy('ad.AIMS_FLIGHT_CATEGORY');
	$query->groupBy('ad.AIMS_DATE_TIME');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_ARRIVED)', 'AIMS_NOS_PASSENGER_ARRIVED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_DEPARTED)', 'AIMS_NOS_PASSENGER_DEPARTED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_TRANSIT)', 'AIMS_NOS_PASSENGER_TRANSIT');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_IN)', 'AIMS_WT_FREIGHT_IN');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_OUT)', 'AIMS_WT_FREIGHT_OUT');
	$query->addExpression('max(AIMS_LASTUPDATE_DATE_TIME)', 'AIMS_LASTUPDATE_DATE_TIME');
    $query->fields('ad',array('AIMS_FLIGHT_CATEGORY'));
  
    $results = $query->execute()
			->fetchAll();
	$output0="";	 
	foreach ($results as $result) {
	  $items = array();
	  $query = db_select('aims_parameter', 'ap')
				->fields('ap',array('prm_desc'))
				->condition('ap.prm_code', $result->AIMS_FLIGHT_CATEGORY,'=')
				->condition('ap.prm_type', 'FLIGHT_CATEGORY','=');
	 
	  $categories = $query->execute()
			->fetchAll();
	
	  foreach ($categories as $category) {
		  $items[] = ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".$category->prm_desc);
	  }
	
	 if($result->AIMS_FLIGHT_CATEGORY =='0') {
		  
		  
      if($result->AIMS_FLIGHT_CATEGORY =='0') {
				$items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
					$output0 = theme('item_list', array('items' => $items));
				}
		  }
	  }

	  $lastupdate ="<div class='col-md-12'>".t('Last updated').date('d-m-Y H:i A',strtotime($result->AIMS_LASTUPDATE_DATE_TIME))."</div>";
	 
  }
  //$output = t('No data available.');

	if (empty($output0)) {
		$items = array();
		$items[] = t('International');
		$items[] = t('Arrived')." : 0";
		$items[] = t('Departed')." : 0";
		$items[] = t('Transit')." : 0";
		if (!empty($items)) {
			$output0 = theme('item_list', array('items' => $items));
		}
	}
	if(empty($lastupdate)) {
		$lastupdate ="<div class='col-md-12'>". t('Last updated') . date('d-M-Y') ."</div>";
	} 
return $output0; 
}


function aims_BLOCK_domestic($airport) {	
	$block = array();
	$query = db_select('NEWWEB_AIMS_DATA', 'ad');
	$query->groupBy('ad.AIMS_LOCAL_AIRPORT');
	$query->groupBy('ad.AIMS_AIRPORT_TYPE'); //GROUP BY user ID
	$query->groupBy('ad.AIMS_FLIGHT_CATEGORY');
	$query->groupBy('ad.AIMS_DATE_TIME');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_ARRIVED)', 'AIMS_NOS_PASSENGER_ARRIVED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_DEPARTED)', 'AIMS_NOS_PASSENGER_DEPARTED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_TRANSIT)', 'AIMS_NOS_PASSENGER_TRANSIT');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_IN)', 'AIMS_WT_FREIGHT_IN');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_OUT)', 'AIMS_WT_FREIGHT_OUT');
	$query->addExpression('max(AIMS_LASTUPDATE_DATE_TIME)', 'AIMS_LASTUPDATE_DATE_TIME');
	$query->fields('ad',array('AIMS_FLIGHT_CATEGORY')); //SELECT the fields from node

	$results = $query->execute()
	->fetchAll();

	$output2="";
	$output1="";
	$output0="";
	foreach ($results as $result) {
	  $items = array();
	  $query = db_select('aims_parameter', 'ap')
				->fields('ap',array('prm_desc'))
				->condition('ap.prm_code', $result->AIMS_FLIGHT_CATEGORY,'=')
				->condition('ap.prm_type', 'FLIGHT_CATEGORY','=');
	 
	  $categories = $query->execute()
			->fetchAll();
	
	  foreach ($categories as $category) {
		  $items[] = ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".$category->prm_desc);
	  }
	
	  if($result->AIMS_FLIGHT_CATEGORY =='1') {
	 
		  if($result->AIMS_FLIGHT_CATEGORY =='1') {
        $items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
			    $output1 = theme('item_list', array('items' => $items));
				}
		  }
		  
   
	  }

	  $lastupdate ="<div class='col-md-12'>".t('Last updated').": ".date('d-m-Y H:i A',strtotime($result->AIMS_LASTUPDATE_DATE_TIME))."</div>";
	 
    } 
  
	if (empty($output1)) {
		$items = array();
	$items[] =  t('Domestic');
		$items[] =  t('Freight In')." : 0";
		$items[] =  t('Departed')." : 0";
		$items[] =  t('Transit')." : 0";
		if (!empty($items)) {
			$output1 = theme('item_list', array('items' => $items));
		}
	}

 

	if(empty($lastupdate)) {
		$lastupdate = "<div class='col-md-12'>".t('Last updated') . date('d-M-Y')."</div>";
	}

	 

	
   return $output1; 
}

function aims_BLOCK_cargo($airport) {	
	$block = array();
	$query = db_select('NEWWEB_AIMS_DATA', 'ad');
	$query->groupBy('ad.AIMS_LOCAL_AIRPORT');
	$query->groupBy('ad.AIMS_AIRPORT_TYPE');//GROUP BY user ID
	$query->groupBy('ad.AIMS_FLIGHT_CATEGORY');
	$query->groupBy('ad.AIMS_DATE_TIME');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_ARRIVED)', 'AIMS_NOS_PASSENGER_ARRIVED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_DEPARTED)', 'AIMS_NOS_PASSENGER_DEPARTED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_TRANSIT)', 'AIMS_NOS_PASSENGER_TRANSIT');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_IN)', 'AIMS_WT_FREIGHT_IN');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_OUT)', 'AIMS_WT_FREIGHT_OUT');
	$query->addExpression('max(AIMS_LASTUPDATE_DATE_TIME)', 'AIMS_LASTUPDATE_DATE_TIME');
	$query->fields('ad',array('AIMS_FLIGHT_CATEGORY'));//SELECT the fields from node
  
    $results = $query->execute()
			->fetchAll();
	 
	 $output2="";
	 $output1="";
	 $output0="";
	 
	foreach ($results as $result) {
	  $items = array();
	  $query = db_select('aims_parameter', 'ap')
				->fields('ap',array('prm_desc'))
				->condition('ap.prm_code', $result->AIMS_FLIGHT_CATEGORY,'=')
				->condition('ap.prm_type', 'FLIGHT_CATEGORY','=');
	 
	  $categories = $query->execute()
			->fetchAll();

	  foreach ($categories as $category) {
		  $items[] = ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".$category->prm_desc);
	  }

	  if($result->AIMS_FLIGHT_CATEGORY =='3') {
		  $items[] = ("<span class='text-distance-out'>".t('Freight In')." </span>: ".round($result->AIMS_WT_FREIGHT_IN,2));
		  $items[] = ("<span class='text-distance-out'>".t('Freight Out')." </span>: ".round($result->AIMS_WT_FREIGHT_OUT,2));
		
		  if (!empty($items)) {
		$output2 = theme('item_list', array('items' => $items));
		  }
	  }  

	  $lastupdate ="<div class='col-md-12'>".t('Last updated').date('d-m-Y H:i A',strtotime($result->AIMS_LASTUPDATE_DATE_TIME))."</div>";
	 
	}
  
	if (empty($output2)) {
		$items = array();
	$items[] = t('Cargo');
		$items[] = t('Freight In')." : 0";
		$items[] = t('Freight Out')." : 0";
		if (!empty($items)) {
			$output2 = theme('item_list', array('items' => $items));
		}
	}

	if(empty($lastupdate)) {
		$lastupdate ="<div class='col-md-12'>". t('Last updated') . date('d-M-Y')."</div>";
	}
	

	
   return $output2;
   
}

/* End Blocks */

function aims_traffic_content($airport) {	
	 $block = array();
	$query = db_select('NEWWEB_AIMS_DATA', 'ad');
	$query->groupBy('ad.AIMS_LOCAL_AIRPORT');
	$query->groupBy('ad.AIMS_AIRPORT_TYPE');//GROUP BY user ID
	$query->groupBy('ad.AIMS_FLIGHT_CATEGORY');
	$query->groupBy('ad.AIMS_DATE_TIME');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_ARRIVED)', 'AIMS_NOS_PASSENGER_ARRIVED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_DEPARTED)', 'AIMS_NOS_PASSENGER_DEPARTED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_TRANSIT)', 'AIMS_NOS_PASSENGER_TRANSIT');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_IN)', 'AIMS_WT_FREIGHT_IN');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_OUT)', 'AIMS_WT_FREIGHT_OUT');
	$query->addExpression('max(AIMS_LASTUPDATE_DATE_TIME)', 'AIMS_LASTUPDATE_DATE_TIME');
  $query->fields('ad',array('AIMS_FLIGHT_CATEGORY'));//SELECT the fields from node

  
    $results = $query->execute()
			->fetchAll();
	 
	 $output2="";
	 $output1="";
	 $output0="";
	 
	foreach ($results as $result) {
	  $items = array();
	  $query = db_select('aims_parameter', 'ap')
				->fields('ap',array('prm_desc'))
				->condition('ap.prm_code', $result->AIMS_FLIGHT_CATEGORY,'=')
				->condition('ap.prm_type', 'FLIGHT_CATEGORY','=');
	 
	  $categories = $query->execute()
			->fetchAll();
	
	  foreach ($categories as $category) {
		  $items[] = ("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;".$category->prm_desc);
	  }
	
	  if($result->AIMS_FLIGHT_CATEGORY =='3') {
		  $items[] = ("<span class='text-distance-out'>".t('Freight In')." </span>: ".round($result->AIMS_WT_FREIGHT_IN,2));
		  $items[] = ("<span class='text-distance-out'>".t('Freight Out')." </span>: ".round($result->AIMS_WT_FREIGHT_OUT,2));
		
		  if (!empty($items)) {
        $output2 = theme('item_list', array('items' => $items));
		  }
	  } else {
		  if($result->AIMS_FLIGHT_CATEGORY =='1') {
        $items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
			    $output1 = theme('item_list', array('items' => $items));
				}
		  }
		  
      if($result->AIMS_FLIGHT_CATEGORY =='0') {
				$items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
					$output0 = theme('item_list', array('items' => $items));
				}
		  }
	  }

	  $lastupdate = "<div class='col-md-12'>" .t('Last updated')." : ".date('d-m-Y H:i A',strtotime($result->AIMS_LASTUPDATE_DATE_TIME)) ."</div>";
	 
  }
  //$output = t('No data available.');

	if (empty($output0)) {
		$items = array();
		$items[] = t('International');
		$items[] = t('Arrived')." : 0";
		$items[] = t('Departed')." : 0";
		$items[] = t('Transit')." : 0";
		if (!empty($items)) {
			$output0 = theme('item_list', array('items' => $items));
		}
	}

	if (empty($output1)) {
		$items = array();
	$items[] =  t('Domestic');
		$items[] =  t('Freight In')." : 0";
		$items[] =  t('Departed')." : 0";
		$items[] =  t('Transit')." : 0";
		if (!empty($items)) {
			$output1 = theme('item_list', array('items' => $items));
		}
	}

	if (empty($output2)) {
		$items = array();
	$items[] = t('Cargo');
		$items[] = t('Freight In')." : 0";
		$items[] = t('Freight Out')." : 0";
		if (!empty($items)) {
			$output2 = theme('item_list', array('items' => $items));
		}
	}

	if(empty($lastupdate)) {
		$lastupdate ="<div class='col-md-12'>". t('Last updated') . date('d-M-Y')."</div>";
	}

	return $output0 . $output1 . $output2 . $lastupdate;
	
	 
 
}

function aims_BLOCK_ABC_CONTENT($airport) {
  $block = array();
	$query = db_select('NEWWEB_AIMS_DATA', 'ad');
	$query->groupBy('ad.AIMS_LOCAL_AIRPORT');
	$query->groupBy('ad.AIMS_AIRPORT_TYPE');//GROUP BY user ID
	$query->groupBy('ad.AIMS_FLIGHT_CATEGORY');
	$query->groupBy('ad.AIMS_DATE_TIME');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_ARRIVED)', 'AIMS_NOS_PASSENGER_ARRIVED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_DEPARTED)', 'AIMS_NOS_PASSENGER_DEPARTED');
	$query->addExpression('sum(AIMS_NOS_PASSENGER_TRANSIT)', 'AIMS_NOS_PASSENGER_TRANSIT');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_IN)', 'AIMS_WT_FREIGHT_IN');
	$query->addExpression('0.001*sum(AIMS_WT_FREIGHT_OUT)', 'AIMS_WT_FREIGHT_OUT');
	$query->addExpression('max(AIMS_LASTUPDATE_DATE_TIME)', 'AIMS_LASTUPDATE_DATE_TIME');
  $query->fields('ad',array('AIMS_FLIGHT_CATEGORY'));//SELECT the fields from node
	//$query->where("AIMS_DATE_TIME = '".date('Y-m-d')."' ");
	//$query->where("AIMS_LOCAL_AIRPORT = '".$airport."' ");
   // ->orderBy('created', 'DESC')//ORDER BY created
   // ->range(0,2);//LIMIT to 2 records
	//print $query;
    $results = $query->execute()
			->fetchAll();
	 
	 $output2="";
	 $output1="";
	 $output0="";
	 
	foreach ($results as $result) {
	  $items = array();
	  $query = db_select('aims_parameter', 'ap')
				->fields('ap',array('prm_desc'))
				->condition('ap.prm_code', $result->AIMS_FLIGHT_CATEGORY,'=')
				->condition('ap.prm_type', 'FLIGHT_CATEGORY','=');
	 
	  $categories = $query->execute()
			->fetchAll();
	
	  foreach ($categories as $category) {
		  $items[] = ($category->prm_desc);
	  }
	
	  if($result->AIMS_FLIGHT_CATEGORY =='3') {
		  $items[] = ("<span class='text-distance-out'>".t('Freight In')." </span>: ".round($result->AIMS_WT_FREIGHT_IN,2));
		  $items[] = ("<span class='text-distance-out'>".t('Freight Out')." </span>: ".round($result->AIMS_WT_FREIGHT_OUT,2));
		
		  if (!empty($items)) {
        $output2 = theme('item_list', array('items' => $items));
		  }
	  } else {
		  if($result->AIMS_FLIGHT_CATEGORY =='1') {
        $items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
			    $output1 = theme('item_list', array('items' => $items));
				}
		  }
		  
      if($result->AIMS_FLIGHT_CATEGORY =='0') {
				$items[] = ("<span class='text-distance'>".t('Arrived')." </span>: ".$result->AIMS_NOS_PASSENGER_ARRIVED);
				$items[] = ("<span class='text-distance'>".t('Departed')." </span>: ".$result->AIMS_NOS_PASSENGER_DEPARTED);
				$items[] = ("<span class='text-distance'>".t('Transit')." </span>: ".$result->AIMS_NOS_PASSENGER_TRANSIT);
				if (!empty($items)) {
					$output0 = theme('item_list', array('items' => $items));
				}
		  }
	  }

	  $lastupdate ="<div class='col-md-12'>". t('Last updated').": ".date('d-m-Y H:i A',strtotime($result->AIMS_LASTUPDATE_DATE_TIME))."</div>";
	  //$lastupdate = date_format($lastupdate, 'd-m-Y H:i:s');
	  //$lastupdate->format('d-M-Y H:i:s');
  }
  //$output = t('No data available.');

	if (empty($output0)) {
		$items = array();
		$items[] = t('International');
		$items[] = t('Arrived')." : 0";
		$items[] = t('Departed')." : 0";
		$items[] = t('Transit')." : 0";
		if (!empty($items)) {
			$output0 = theme('item_list', array('items' => $items));
		}
	}

	if (empty($output1)) {
		$items = array();
		$items[] =  t('Domestic');
		$items[] =  t('Freight In')." : 0";
		$items[] =  t('Departed')." : 0";
		$items[] =  t('Transit')." : 0";
		if (!empty($items)) {
			$output1 = theme('item_list', array('items' => $items));
		}
	}

	if (empty($output2)) {
		$items = array();
		$items[] = t('Cargo');
		$items[] = t('Freight In')." : 0";
		$items[] = t('Freight Out')." : 0";
		if (!empty($items)) {
			$output2 = theme('item_list', array('items' => $items));
		}
	}

	if(empty($lastupdate)) {
		$lastupdate ="<div class='col-md-12'>". t('Last updated') . date('d-M-Y')."</div>";
	}

  return $output0 . $output1 . $output2 . $lastupdate;
}

/**
 * Implements hook_preprocess_HOOK(&$variables)
 */
function aims_preprocess_investors_traffic_reports(&$variables) {

  // fetch AIMS data for airport.
  $currentMonth = "01";
  $currentYear = "2016";
  $prevousYear = $currentYear-1;
  $prevousMonth = $currentMonth;
  $current_year_month = $currentYear.$currentMonth;
  $previous_year_month = $prevousYear.$prevousMonth;
  
  
  $tbl = 'NEWWEB_AIMS_MONTHS';
  $qry = db_select($tbl,'tbl')
  		->fields('tbl')
  		->condition(
  		  db_or()
  		  ->condition('tbl.AIMS_YYYY_MM', $current_year_month,'=')
   		  ->condition('tbl.AIMS_YYYY_MM', $previous_year_month,'=')
   		);

  $rs = $qry->execute();
  
  // array's to hold report data.
  $recordset = array();
  $recordset['Aircraft_Movements_(In_Nos.)'] = array();
  $recordset['Passengers_(In_Nos.)'] = array();
  $recordset['Freight_(In_Tonnes.)'] = array();

  // array to hold total under different category.
  $rs_total = array();

  while($obj = $rs->fetchObject()) {
  	$AIMS_LOCAL_AIRPORT = $obj->AIMS_LOCAL_AIRPORT;
    $AIMS_AIRPORT_TYPE = $obj->AIMS_AIRPORT_TYPE;
    $AIMS_FLIGHT_CATEGORY = $obj->AIMS_FLIGHT_CATEGORY;
    $AIMS_YYYY_MM = $obj->AIMS_YYYY_MM;
    $AIMS_NOS_CRAFT_ARRIVED = $obj->AIMS_NOS_CRAFT_ARRIVED;
    $AIMS_NOS_CRAFT_DEPARTED = $obj->AIMS_NOS_CRAFT_DEPARTED;
    $AIMS_NOS_PASSENGER_ARRIVED = $obj->AIMS_NOS_PASSENGER_ARRIVED;
    $AIMS_NOS_PASSENGER_DEPARTED = $obj->AIMS_NOS_PASSENGER_DEPARTED;
    $AIMS_NOS_PASSENGER_TRANSIT = $obj->AIMS_NOS_PASSENGER_TRANSIT;
    $AIMS_WT_FREIGHT_IN = $obj->AIMS_WT_FREIGHT_IN;
    $AIMS_WT_FREIGHT_OUT = $obj->AIMS_WT_FREIGHT_OUT;

    // consolidate International flights data.
    if ($AIMS_FLIGHT_CATEGORY == 0) {
      $flight_cat = 'int';
    } else {
      $flight_cat = 'dom';
    }

    switch ($AIMS_AIRPORT_TYPE) {
      case 0 : // internation airport
        // get airplanes data
        $tmp_craft = ($AIMS_NOS_CRAFT_ARRIVED + $AIMS_NOS_CRAFT_DEPARTED);
        if (array_key_exists('international', $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['international'] += $tmp_craft;
        } else {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['international'] = $tmp_craft;
        }
        $rs_total['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_craft;
        unset($tmp_craft);

        // get passengers data
        $tmp_psng = $AIMS_NOS_PASSENGER_ARRIVED + $AIMS_NOS_PASSENGER_DEPARTED + 
        $AIMS_NOS_PASSENGER_TRANSIT;
        if (array_key_exists('international', $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['international'] += $tmp_psng;
        } else {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['international'] = $tmp_psng;
        }
        $rs_total['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_psng;
        unset($tmp_psng);

        // get freight data
        $tmp_freight = $AIMS_WT_FREIGHT_IN + $AIMS_WT_FREIGHT_OUT;
        if (array_key_exists('international', $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['international'] += $tmp_freight;
        } else {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['international'] = $tmp_freight;
        }
        $rs_total['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_freight;
        unset($tmp_freight);
      	break;

      case 1 : // domestic airport
        // get airplanes data
        $tmp_craft = ($AIMS_NOS_CRAFT_ARRIVED + $AIMS_NOS_CRAFT_DEPARTED);
        if (array_key_exists('domestic', $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
       	  $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] += $tmp_craft;
        } else {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] = $tmp_craft;
        }
        $rs_total['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_craft;
        unset($tmp_craft);

        // get passengers data
        $tmp_psng = $AIMS_NOS_PASSENGER_ARRIVED + $AIMS_NOS_PASSENGER_DEPARTED + 
        $AIMS_NOS_PASSENGER_TRANSIT;
        if (array_key_exists('domestic', $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] += $tmp_psng;
        } else {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] = $tmp_psng;
        }
        $rs_total['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_psng;
        unset($tmp_psng);

        // get freight data
        $tmp_freight = $AIMS_WT_FREIGHT_IN + $AIMS_WT_FREIGHT_OUT;
        if (array_key_exists('domestic', $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] += $tmp_freight;
        } else {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['domestic'] = $tmp_freight;
        }
        $rs_total['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_freight;
        unset($tmp_freight);
      	break;
      	
      case 2 : // JV airport
        // get airplanes data
        $tmp_craft = ($AIMS_NOS_CRAFT_ARRIVED + $AIMS_NOS_CRAFT_DEPARTED);
        if (array_key_exists('jv', $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] += $tmp_craft;
        } else {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] = $tmp_craft;
        }
        $rs_total['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_craft;
        unset($tmp_craft);

        // get passengers data
        $tmp_psng = $AIMS_NOS_PASSENGER_ARRIVED + $AIMS_NOS_PASSENGER_DEPARTED + 
        $AIMS_NOS_PASSENGER_TRANSIT;
        if (array_key_exists('jv', $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] += $tmp_psng;
        } else {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] = $tmp_psng;
        }
        $rs_total['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_psng;
        unset($tmp_psng);

        // get freight data
        $tmp_freight = $AIMS_WT_FREIGHT_IN + $AIMS_WT_FREIGHT_OUT;
        if (array_key_exists('jv', $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] += $tmp_freight;
        } else {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['jv'] = $tmp_freight;
        }
        $rs_total['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_freight;
        unset($tmp_freight);
        break;
 
      case 3 : // custom airport
        // get airplanes data
        $tmp_craft = ($AIMS_NOS_CRAFT_ARRIVED + $AIMS_NOS_CRAFT_DEPARTED);
        if (array_key_exists('custom', $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] += $tmp_craft;
        } else {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] = $tmp_craft;
        }
        $rs_total['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_craft;
        unset($tmp_craft);

        // get passengers data
        $tmp_psng = $AIMS_NOS_PASSENGER_ARRIVED + $AIMS_NOS_PASSENGER_DEPARTED + 
        $AIMS_NOS_PASSENGER_TRANSIT;
        if (array_key_exists('custom', $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
       	  $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] += $tmp_psng;
        } else {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] = $tmp_psng;
        }
        $rs_total['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_psng;
        unset($tmp_psng);

        // get freight data
        $tmp_freight = $AIMS_WT_FREIGHT_IN + $AIMS_WT_FREIGHT_OUT;
        if (array_key_exists('custom', $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] += $tmp_freight;
        } else {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['custom'] = $tmp_freight;
        }
        $rs_total['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_freight;
        unset($tmp_freight);
      	break;
      	
      case 4 : // other airports
        // get airplanes data
        $tmp_craft = ($AIMS_NOS_CRAFT_ARRIVED + $AIMS_NOS_CRAFT_DEPARTED);
        if (array_key_exists('other', $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['other'] += $tmp_craft;
        } else {
          $recordset['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['other'] = $tmp_craft;
        }
        $rs_total['Aircraft_Movements_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_craft;
        unset($tmp_craft);

        // get passengers data
        $tmp_psng = $AIMS_NOS_PASSENGER_ARRIVED + $AIMS_NOS_PASSENGER_DEPARTED + 
        $AIMS_NOS_PASSENGER_TRANSIT;
        if (array_key_exists('other', $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['other'] += $tmp_psng;
        } else {
          $recordset['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat]['other'] = $tmp_psng;
        }
        $rs_total['Passengers_(In_Nos.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_psng;
        unset($tmp_psng);

        // get freight data
        $tmp_freight = $AIMS_WT_FREIGHT_IN + $AIMS_WT_FREIGHT_OUT;
        if (array_key_exists('other', $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat])) {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['other'] += $tmp_freight;
        } else {
          $recordset['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat]['other'] = $tmp_freight;
        }
        $rs_total['Freight_(In_Tonnes.)'][$AIMS_YYYY_MM][$flight_cat] += $tmp_freight;
        unset($tmp_freight);
        break;

    } // switch ends
  } // while ends
  
  
  // Structure the report output
  $out = "<table class = 'aai-reports traffic-summary'>";
    $out .= "<tr>
      <th rowspan = '2' class = 'aai-align-center'>".t('AIRPORT CATEGORY')."</th>
      <th colspan = '3' class = 'aai-align-center'>".t('FOR THE MONTH OF '.$currentMonth)."</th>
      <th colspan = '3' class = 'aai-align-center'>".t('TRAFFIC FOR THE MONTH OF APRIL - JANUARY')."</th>
    </tr>
    <tr>
      <th>".$currentYear."</th>
      <th>".$prevousYear."</th>
      <th>% ".t('CHANGE')."</th>
      <th>2015-16</th>
      <th>2014-15</th>
      <th>% ".t('CHANGE')."</th>
    </tr>";
    foreach ($recordset as $report_head => $ary) {
    	
      // set report section head
      // International section
      $out .= "<tr><td class = 'report-section-head aai-bold' colspan = '7'>";
      $out .= t(ucwords(str_replace('_', ' ', $report_head))) . "</td></tr>";
      $out .= "<tr><td class = 'report-section-sub-head aai-bold' colspan = '7'>";
      $out .= t(ucwords('International')) . "</td></tr>";
      foreach (array('international', 'jv', 'custom', 'domestic', 'other') as $airport_type) {
      	$out .= "<tr>";
	      $out .= "<td>" . t(ucwords("$airport_type airports")) . "</td>";
	      $out .= "<td class = 'aai-num'>" . $ary[$current_year_month]['int'][$airport_type] . "</td>";
	      $out .= "<td class = 'aai-num'>" . $ary[$previous_year_month]['int'][$airport_type] . "</td>";
	      $_change = _get_percent_difference($ary[$current_year_month]['int'][$airport_type], $ary[$previous_year_month]['int'][$airport_type]);
	      $out .= "<td class = 'aai-num'>" . $_change . "</td>";
	      $out .= "<td class = 'aai-num'>" . $ary['201512']['int'][$airport_type] . "</td>";
	      $out .= "<td class = 'aai-num'>" . $ary['201412']['int'][$airport_type] . "</td>";
	      $_change = _get_percent_difference($ary['201512']['int'][$airport_type], $ary['201412']['int'][$airport_type]);
	      $out .= "<td class = 'aai-num'>" . $_change . "</td>";
        $out .= "<tr>";
      }
      // add row to show category total for international airlines
      $out .= "<tr  class = 'report-total'>";
        $out .= "<td class = 'aai-bold'>TOTAL</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head][$current_year_month]['int'] . "</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head][$previous_year_month]['int'] . "</td>";
        $_change = _get_percent_difference($rs_total[$report_head][$current_year_month]['int'], $rs_total[$report_head][$previous_year_month]['int']);
        $out .= "<td class = 'aai-num'>";
          $out .= $_change;
        $out .= "</td>";
        $out .= "<td class = 'aai-num'>";
          $out .= $rs_total[$report_head]['201512']['int'];
        $out .= "</td>";
        $out .= "<td class = 'aai-num'>";
          $out .= $rs_total[$report_head]['201412']['int'];
        $out .= "</td>";
        $_change = _get_percent_difference($rs_total[$report_head]['201512']['int'], $rs_total[$report_head]['201412']['int']);
        $out .= "<td class = 'aai-num'>" . $_change . "</td>";
      $out .= "</tr>";

      // Domestic section
      $out .= "<tr><td class = 'report-section-sub-head aai-bold' colspan = '7'>";
      $out .= t(ucwords('Domestic')) . "</td></tr>";
      foreach (array('international', 'jv', 'custom', 'domestic', 'other') as $airport_type) {
        $out .= "<tr>";
          $out .= "<td>" . t(ucwords("$airport_type airports")) . "</td>";
          $out .= "<td class = 'aai-num'>" . $ary[$current_year_month]['dom'][$airport_type] . "</td>";
          $out .= "<td class = 'aai-num'>" . $ary[$previous_year_month]['dom'][$airport_type] . "</td>";
          $_change = _get_percent_difference($ary[$current_year_month]['dom'][$airport_type], $ary[$previous_year_month]['dom'][$airport_type]);
          $out .= "<td class = 'aai-num'>" . $_change . "</td>";
          $out .= "<td class = 'aai-num'>" . $ary['201512']['dom'][$airport_type] . "</td>";
          $out .= "<td class = 'aai-num'>" . $ary['201412']['dom'][$airport_type] . "</td>";
          $_change = _get_percent_difference($ary['201512']['dom'][$airport_type], $ary['201412']['dom'][$airport_type]);
          $out .= "<td class = 'aai-num'>" . $_change . "</td>";
        $out .= "<tr>";
      }
      // add row to show category total for domestic airlines
      $out .= "<tr class = 'report-total'>";
        $out .= "<td class='aai-bold'>TOTAL</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head][$current_year_month]['dom'] . "</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head][$previous_year_month]['dom'] . "</td>";
        $_change = _get_percent_difference($rs_total[$report_head][$current_year_month]['dom'], $rs_total[$report_head][$previous_year_month]['dom']);
        $out .= "<td class = 'aai-num'>" . $_change . "</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head]['201512']['dom'] . "</td>";
        $out .= "<td class = 'aai-num'>" . $rs_total[$report_head]['201412']['dom'] . "</td>";
        $_change = _get_percent_difference($rs_total[$report_head]['201512']['dom'], $rs_total[$report_head]['201412']['dom']);
        $out .= "<td class = 'aai-num'>" . $_change . "</td>";
      $out .= "</tr>";
    }
  $out .= "</table>";
  $out .= l(t('Back to Reports'), 'investors/reports');

  // set variable for the template
  $variables['airport_traffic_report'] = serialize($out);
}

/**
 * Function to calculate % difference.
 *
 * @param Number
 *   $num1 first number (greater number).
 * @param Number
 *   $num2 second number.
 *
 * @return Number
 *   $response calculated value.
 */
function _get_percent_difference($num1, $num2) {
  $response = 0;
  if ($num1 && $num2) {
    $response = ( ($num1 - $num2) / $num2 ) * 100;
    return number_format($response, 2);
  } else {
    $response = '-';
  }

  return $response;
}

/**
 * Implementation of hook_form_alter().
 */
function aims_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "user_login") {
    Global $base_url;
    $url = trim($base_url);
	  
    $form['name']['#title_display'] = 'invisible';
    $form['pass']['#title_display'] = 'invisible';
	$form['name']['#attributes']['placeholder'] = t( 'Username' );
	$form['pass']['#attributes']['placeholder'] = t( 'Password' );
	$form['name']['#description'] = t('');
	$form['pass']['#description'] = t('');
	$cancel_btn = "<div class='form-actions form-wrapper' id='edit-actions'>";
	$cancel_btn .= "<input class='form-submit cancelb' type='button' value='Cancel' onClick=javascript:gotohome('$url'); />";
	$cancel_btn .= "</div>";
 
    $form['actions']['cancel'] = array(
      '#type'   => 'submit',
      '#value'  => t('Cancel'),
      '#access' => TRUE,
      '#weight' => 55,
      '#submit' => array('cancel_button_form_cancel'),
      '#limit_validation_errors' => array(),
    );
   } else if ($form_id == "aai_department_node_form") {
    // alter department entry form.
    $form['title']['#required'] = FALSE;
    $form['title']['#prefix'] = '<div style="display: none;">';
    $form['title']['#suffix'] = '</div>';
    $form['#validate'][] = 'aims_department_form_validate';
    $form['#submit'][] = '_set_title_value';	  
   }
 }

/**
 * Function to validate 'add department' form.
 */
function aims_department_form_validate(&$form, &$form_state) {
  $functions = AAI::getInstance();
  $lang = $functions->aaiCurrentLang();

  // get selected department parameters
  $dept = $form_state['values']['field_department'][$lang][0]['tid'];
  $nodeLang = $form_state['values']['language'];
  $hq_tid = $form_state['values']['field_aai_headquarter'][$lang][0]['tid'];
  $hq_name = taxonomy_term_load($hq_tid);
  $hq_name = $hq_name->name;

  $region = 0;
  if (isset($form_state['values']['field_region'][$lang][0]['tid'])) {
    $region = $form_state['values']['field_region'][$lang][0]['tid'];
  }

  // case when CHQ is being added
  if (!$region || $hq_name == 'Corporate Headquarter') {
    // check if Corporate headquarter exists
    $if_chq_exists = $functions->aaiCheckIfDeptExists($nodeLang, $dept, $hq_tid); 

   if($if_chq_exists >= 1 && arg(2) != 'edit') {
      form_set_error('field_department', t("This entry already exists."));
      form_set_error('field_aai_headquarter', '');
    }
	if($if_chq_exists > 1 && arg(2) == 'edit') {
      form_set_error('field_department', t("This entry already exists."));
      form_set_error('field_aai_headquarter', '');
    }
  } else {
    $nodeRegionCount = $functions->aaiCheckIfDeptExists($nodeLang, $dept,$hq_tid,$region);
    if($nodeRegionCount >= 1 && arg(2) != 'edit') {
      form_set_error('field_department',t("This entry already exists."));
      form_set_error('field_aai_headquarter', '');
      form_set_error('field_region', '');
    }
	 if($nodeRegionCount > 1 && arg(2) == 'edit') {
      form_set_error('field_department',t("This entry already exists."));
      form_set_error('field_aai_headquarter', '');
      form_set_error('field_region', '');
    }
  }
}

function _set_title_value(&$form, &$form_state) {
  $region = $form_state['values']['field_region']['und'][0]['tid'];
  $dept = $form_state['values']['field_department']['und'][0]['tid'];
  $headq = $form_state['values']['field_aai_headquarter']['und'][0]['tid'];  
  $term = taxonomy_term_load($dept);
  $name = $term->name;
  $form_state['values']['title'] = $name;
}

function cancel_button_form_cancel($form, &$form_state) {
  $form_state['redirect'] = 'node';
}


function aims_BLOCK_traffic($airport) {	
  $html = "<div id='passengerInfo' class='passengerInfo animate-zoom'>
	<div class='passengerInfo-header'>Traffic Information <span class='closeBtn'>x</span></div>
	<div ng-app='myApp' ng-controller='myCtrl'> 
	<div class='accordion_content'>
	
	<div ng-controller='myCtrlds' id='data22'>
	<div class='same_open same_offset colorA' data='tab-1' ng-click='myFunc(1)'>
	I<br>
	N<br>
	T<br>
	E<br>
	R<br>
	N<br>
	A<br>
	T<br>
	I<br>
	O<br>
	N<br>
	A<br>
	L<br>
	</div>
	<div id='tab-1' class='same_open_content same_offset open_content'>
	<div class='open_article'>     
	<div class='table-responsive'>
	<div ng-bind-html='renderHtml(livedata)' id='dataint'></div>
	</div>                	
	</div>
	</div>
	</div>
	
	<div ng-controller='myCtrlds' id='data23'>		
	<div class='same_open same_offset colorB' data='tab-2' ng-click='myFunc(2)'>
	D<br>
	O<br>
	M<br>
	E<br>
	S<br>
	T<br>
	I<br>
	C
	</div>
	<div id='tab-2' class='same_open_content same_offset'>
	<div class='open_article'>
	<div ng-bind-html='renderHtml(livedata)' id='dataa23'></div>
	</div>
	</div>
	</div> 
	
	<div ng-controller='myCtrlds' id='data24'>		
	<div class='same_open same_offset colorC' data='tab-3' ng-click='myFunc(3)'>
	C<br>
	A<br>
	R<br>
	G<br>
	O</div>
	<div id='tab-3' class='same_open_content same_offset'>
	<div class='open_article'>             
	<div ng-bind-html='renderHtml(livedata)' id='dataa24'></div>			
	</div>
	</div> 
	</div> </div>
	</div>		
	<div class='passengerInfo-header'>  &nbsp; </div>
	</div>";		
 return $html;
}

function aims_wysiwyg_editor_settings_alter(&$settings, $context) {
    if ($context['profile']->editor == 'ckeditor') {
        $settings['extraAllowedContent'] = array(
            'a[download,type,length,href]',
            'span;ul;li;table;tr;td;style;*[id];*(*);*{*}'
        );
    }
}
